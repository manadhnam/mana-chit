-- Migration: Add tables and columns for missing features
-- Timestamp: 20250617000000

-- 1. Comprehensive Audit Trail
CREATE TABLE IF NOT EXISTS audit_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  actor_id UUID REFERENCES users(id),
  action VARCHAR(255) NOT NULL, -- e.g., 'user.create', 'payment.manual_entry'
  target_id TEXT, -- ID of the entity that was changed
  details JSONB, -- Before/after values for auditing
  ip_address INET,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_audit_log_actor_id ON audit_log(actor_id);
CREATE INDEX IF NOT EXISTS idx_audit_log_action ON audit_log(action);
CREATE INDEX IF NOT EXISTS idx_audit_log_target_id ON audit_log(target_id);

-- 2. Chit Bidding/Auction System
CREATE TYPE auction_status AS ENUM ('scheduled', 'open', 'closed', 'cancelled');
CREATE TYPE bid_status AS ENUM ('active', 'withdrawn');

CREATE TABLE IF NOT EXISTS auctions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  group_id UUID REFERENCES groups(id) NOT NULL,
  auction_date TIMESTAMP WITH TIME ZONE NOT NULL,
  min_bid_amount DECIMAL(12, 2) NOT NULL,
  winning_bid_id UUID, -- To be updated after auction closes
  status auction_status DEFAULT 'scheduled',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS bids (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  auction_id UUID REFERENCES auctions(id) NOT NULL,
  user_id UUID REFERENCES users(id) NOT NULL,
  bid_amount DECIMAL(12, 2) NOT NULL,
  is_auto_bid BOOLEAN DEFAULT FALSE,
  status bid_status DEFAULT 'active',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Add foreign key constraint from auctions to bids after bids table is created
ALTER TABLE auctions ADD CONSTRAINT fk_auctions_winning_bid FOREIGN KEY (winning_bid_id) REFERENCES bids(id);

CREATE INDEX IF NOT EXISTS idx_auctions_group_id ON auctions(group_id);
CREATE INDEX IF NOT EXISTS idx_bids_auction_id ON bids(auction_id);
CREATE INDEX IF NOT EXISTS idx_bids_user_id ON bids(user_id);


-- 3. KYC & Referral System (extend users table)
CREATE TYPE kyc_status AS ENUM ('pending', 'submitted', 'verified', 'rejected');

ALTER TABLE users ADD COLUMN IF NOT EXISTS kyc_status kyc_status DEFAULT 'pending';
ALTER TABLE users ADD COLUMN IF NOT EXISTS kyc_documents JSONB; -- Store URLs to docs in Supabase Storage
ALTER TABLE users ADD COLUMN IF NOT EXISTS referral_code VARCHAR(10) UNIQUE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS referred_by UUID REFERENCES users(id);


-- 4. Loan Eligibility Engine (extend loan_requests table)
ALTER TABLE loan_requests ADD COLUMN IF NOT EXISTS cibil_score INTEGER;
ALTER TABLE loan_requests ADD COLUMN IF NOT EXISTS eligibility_details JSONB; -- Store reasons, checks passed/failed


-- 5. Meeting & Auction Scheduler (extend groups table)
ALTER TABLE groups ADD COLUMN IF NOT EXISTS meeting_details JSONB; -- Store schedule, e.g., { frequency: 'monthly', day: '1st Saturday', time: '10:00' }


-- Add updated_at triggers to new tables
CREATE TRIGGER update_auctions_updated_at
    BEFORE UPDATE ON auctions
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Note: Bids are typically immutable, so an update trigger may not be necessary.

-- Function to generate a unique referral code
CREATE OR REPLACE FUNCTION generate_referral_code()
RETURNS TEXT AS $$
DECLARE
  new_code TEXT;
  is_duplicate BOOLEAN;
BEGIN
  LOOP
    new_code := (
      SELECT string_agg(
        (
          '{"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","0","1","2","3","4","5","6","7","8","9"}'::text[]
        )[floor(random() * 36)+1], ''
      )
      FROM generate_series(1, 8)
    );
    SELECT EXISTS(SELECT 1 FROM users WHERE referral_code = new_code) INTO is_duplicate;
    IF NOT is_duplicate THEN
      RETURN new_code;
    END IF;
  END LOOP;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-generate referral code for new users
CREATE OR REPLACE FUNCTION set_referral_code()
RETURNS TRIGGER AS $$
BEGIN
  NEW.referral_code := generate_referral_code();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_set_referral_code
BEFORE INSERT ON users
FOR EACH ROW
EXECUTE FUNCTION set_referral_code();

-- RLS Policies (Examples - MUST BE REVIEWED AND EXPANDED)
-- Audit Log: Only superAdmins can view
ALTER TABLE audit_log ENABLE ROW LEVEL SECURITY;
CREATE POLICY "SuperAdmins can view audit logs" ON audit_log FOR SELECT USING ((get_my_claim('user_role'::text)) = '"superAdmin"'::jsonb);

-- Auctions: Members of a group can view its auctions
ALTER TABLE auctions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Group members can view auctions" ON auctions FOR SELECT USING (group_id IN (SELECT group_id FROM users WHERE id = auth.uid()));

-- Bids: Users can view their own bids, and group members can see bids in their auctions
ALTER TABLE bids ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own bids" ON bids FOR SELECT USING (user_id = auth.uid());
CREATE POLICY "Group members can see auction bids" ON bids FOR SELECT USING (auction_id IN (SELECT id FROM auctions WHERE group_id IN (SELECT group_id FROM users WHERE id = auth.uid())));

-- Users KYC: Users can update their own KYC docs, admins can update any
CREATE POLICY "Users can update their own KYC" ON users FOR UPDATE USING (id = auth.uid()) WITH CHECK (id = auth.uid());
CREATE POLICY "Admins can update any KYC" ON users FOR UPDATE USING ((get_my_claim('user_role'::text)) IN ('"superAdmin"'::jsonb, '"branchManager"'::jsonb)); 